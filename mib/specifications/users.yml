openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /

paths:
  /user:
    post:
      summary: Add a new user
      tags:
        - Users
      operationId: mib.resources.users.create_user
      requestBody:
        description: Create a new customer inside microservice app
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Created
        200:
          description: User already exists
        default:
          description: Error during creation of the user

  /user/{user_id}:
    get:
      tags: [ User ]
      summary: Get a user by its id
      operationId: mib.resources.users.get_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user
    put:
      summary: Update the profile info of current user
      tags: [ User ]
      operationId: mib.resources.users.edit_user
      parameters:
        - name: user_id
          description: User Unique Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update customer inside microservice app
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: Current user has update his personal info
        404:
          description: User not found
        default:
          description: Error during update of the user

    delete:
      tags: [ User ]
      description: Delete a user by its id
      operationId: mib.resources.users.delete_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User deleted
        404:
          description: User not found
        default:
          description: An error occured during the deletion the user

  /search_users/{searched_input}:
    post:
      summary: Get the list of all users for which parameters the searched input is a substring
      tags: [ Users ]
      operationId: mib.resources.users.get_searched_users
      parameters:
        - name: searched_input
          description: searched input to get the filtered users list
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns users filtered list
        default:
          description: An error occured during retrieving the filtered list

  /report/{email}:
    post:
      summary: Report a user filling the form 
      tags: [ Users ]
      operationId: mib.resources.users.report
      parameters:
        - name: email
          description: email of the user to be reported
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User reported
        404:
          description: User doesn't exist
        default:
          description: An error occured reporting the user

  /user_email/{user_email}:
    get:
      tags: [ User ]
      description: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user

  /authenticate:
    post:
      summary: Authenticate a user
      tags: [ Users ]
      operationId: mib.resources.auth.authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: user@studenti.unipi.it
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
                  user:
                    $ref: '#/components/schemas/User'

        400:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  authentication:
                    type: string
                    description: "It can be failure or success"
                    default: 'failure'
        default:
          description: An error occured during login
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_message:
                    type: string    
  /users:
    get:
      summary: Get the list of all users
      tags: [ Users ]
      operationId: mib.resources.users.get_all_users
      responses:
        200:
          description: Returns users list
        default:
          description: An error occured during retrieving the users
        

  /badwords/{user_id}:
    get:
      tags: [ User ]
      description: Get the badwords of user by its id
      operationId: mib.resources.users.get_badwords
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Returns user's badwords
        404:
          description: User not found
        default:
          description: An error occured during retrieving the user's badwords

components:
  schemas:
    User:
      required:
        - firstname
        - lastname
        - email
        - birthdate
      type: object
      properties:
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
        birthdate:
          type: string
          description: Customer birthdate
          example: '01/01/2020'
          format: date
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 1
          maxLength: 127
          
    UpdateUser:
      required:
        - firstname
        - lastname
        - birthdate
      type: object
      properties:
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org
        birthdate:
          type: string
          description: Customer birthdate
          example: '01/01/2020'
          format: date
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 1
          maxLength: 127