openapi: "3.0.1"
info:
  title: Users Service API
  description: Users Microservice of Message in a Bottle Application
  version: "0.1"

servers:
  - url: /

paths:
  /user:
    post:
      summary: Add a new user
      tags:
        - User
      operationId: mib.resources.users.create_user
      requestBody:
        description: Create a new customer inside microservice app
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthFields'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        200:
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: failure
                  message:
                    type: string
                    description: Result message
                    default: User already exists
        default:
          description: Error creating the user

  /user/{user_id}:
    get:
      tags: [ User ]
      summary: Get a user by its id
      operationId: mib.resources.users.get_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured retrieving the user
    put:
      summary: Update the profile info of user with user_id
      tags: [ User ]
      operationId: mib.resources.users.edit_user
      parameters:
        - name: user_id
          description: User Unique Id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Update customer inside microservice app
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthFields'
      responses:
        200:
          description: User has update his personal info, returns it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: Error updating the user

    delete:
      tags: [ User ]
      summary: Delete the user with user_id
      operationId: mib.resources.users.delete_user
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: success
                  message:
                    type: string
                    description: Result message
                    default: Successfully deleted
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured during the deletion the user

  /search_users/{searched_input}:
    post:
      summary: Get the list of all users for which parameters the searched input is a substring
      tags: [ Users ]
      operationId: mib.resources.users.get_searched_users
      parameters:
        - name: searched_input
          description: searched input to get the filtered users list
          in: path
          required: true
          schema:
            type: string
            
      responses:
        200:
          description: Returns users filtered list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: An error occured during retrieving the filtered list
          
  /user/updatepoints/{user_id}:
    put:
      summary: Update users's points after he win lottery
      tags: [ Points ]
      operationId: mib.resources.users.update_points
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Update success
        404:
          description: User not found
        default:
          description: An error occured during updating user's record

  /report/{email}:
    post:
      summary: Report a user filling the form 
      tags: [ Users ]
      operationId: mib.resources.users.report
      parameters:
        - name: email
          description: email of the user to be reported
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User reported
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: success
                  message:
                    type: string
                    description: Result message
                    default: User reported
        404:
          description: User doesn't exist
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured reporting the user

  /user_email/{user_email}:
    get:
      tags: [ User ]
      summary: Get a user by its email
      operationId: mib.resources.users.get_user_by_email
      parameters:
        - name: user_email
          description: User Unique Email
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured retrieving the user

  /authenticate:
    post:
      summary: Authenticate a user
      tags: [ Users ]
      operationId: mib.resources.auth.authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              x-body-name: auth
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: mario.rossi@example.org
                password:
                  type: string
                  example: abcd123A
      responses:
        200:
          description: User credentials are correct, returns the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        400:
          description: User credentials are not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: failure
                  message:
                    type: string
                    description: The user inserts incorrect credentials
                    default: Incorrect credentials
        403:
          description: User is blocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: failure
                  message:
                    type: string
                    description: The user is blocked
                    default: Blocked user
        default:
          description: An error occured during login

  /users:
    get:
      summary: Get the list of all users
      tags: [ Users ]
      operationId: mib.resources.users.get_all_users
      responses:
        200:
          description: Returns users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        default:
          description: An error occured retrieving the users
        

  /badwords/{user_id}:
    get:
      tags: [ Badwords ]
      summary: Get the badwords of user with user_id
      operationId: mib.resources.users.get_badwords
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Returns user's badwords
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badwords'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured during retrieving the user's badwords   
    post:
      tags: [ Badwords ]
      summary: Create the badwords of user with user_id
      operationId: mib.resources.users.create_badwords
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - badwords
              properties:
                badwords:
                   $ref: '#/components/schemas/BadwordsField'
      responses:
        201:
          description: Returns user's created badwords
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badwords'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured creating the user's badwords
      
    put:
      tags: [ Badwords ]
      summary: Update the badwords of user with user_id
      operationId: mib.resources.users.update_badwords
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - badwords
              properties:
                badwords:
                   $ref: '#/components/schemas/BadwordsField'
      responses:
        200:
          description: Returns user's updated badwords
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badwords'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured updating the user's badwords
   
    delete:
      tags: [ Badwords ]
      summary: Delete the badwords of user with user_id
      operationId: mib.resources.users.delete_badwords
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: Badwords deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: success
                  message:
                    type: string
                    description: Result message
                    default: Successfully deleted
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured updating the user's badwords
      

  /blacklist/{user_id}:
    get:
      tags: [ Blacklist ]
      summary: Get the blacklist of user with user_id
      operationId: mib.resources.users.get_blacklist
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Returns user's blacklist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blacklist'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured retrieving the user's blacklist   
    post:
      tags: [ Blacklist ]
      summary: Create the blacklist of user with user_id
      operationId: mib.resources.users.create_blacklist
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - blacklist
              properties:
                blacklist:
                   $ref: '#/components/schemas/BlacklistField'
      responses:
        201:
          description: Returns user's created blacklist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blacklist'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured creating the user's blacklist
      
    put:
      tags: [ Blacklist ]
      summary: Update the blacklist of user with user_id
      operationId: mib.resources.users.update_blacklist
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - blacklist
              properties:
                blacklist:
                   $ref: '#/components/schemas/BlacklistField'
      responses:
        200:
          description: Returns user's updated blacklist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blacklist'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured updating the user's blacklist
   
    delete:
      tags: [ Blacklist ]
      summary: Delete the blacklist of user with user_id
      operationId: mib.resources.users.delete_blacklist
      parameters:
        - name: user_id
          description: User Unique ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: Blacklist deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Result status
                    default: success
                  message:
                    type: string
                    description: Result message
                    default: Successfully deleted
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        default:
          description: An error occured updating the user's badwords
      
components:
  schemas:
    User:
      required:
        - status
        - message
        - body  
      type: object
      properties:
        status:
          type: string
          description: status code message
          example: success
        message: 
          type: string
          description: operation result
          example: Operation done
        body:
          $ref: '#/components/schemas/UserFieldsWithPoints'
    
    Users:
      required:
        - status
        - message
        - body
      type: object
      properties:
        status:
          type: string
          description: status code message
          example: success
        message: 
          type: string
          description: operation result
          example: Operation done
        body:
          $ref: '#/components/schemas/UsersFieldsWithPoints'

    UsersFields:
      type: array
      items:
        $ref: '#/components/schemas/UserFields'
    
    UsersFieldsWithPoints:
      type: array
      items:
        $ref: '#/components/schemas/UserFieldsWithPoints'

    UserAuthFields:
      required:
        - email
        - firstname
        - lastname
        - birthdate
        - password
      type: object
      properties:
        photo:
          type: string
          description: Avatar of customer
          example: base64photo
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org 
          format: email
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        password:
          type: string
          description: Customer password
          example: 'abcd1234'
          minLength: 5
          maxLength: 127
        birthdate:
          type: string
          description: Customer birthdate
          example: '01/01/2020'
          format: date

    UserFields:
      required:
        - email
        - firstname
        - lastname
        - birthdate
      type: object
      properties:
        photo:
          type: string
          description: Avatar of customer
          example: base64photo
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org 
          format: email
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        birthdate:
          type: string
          description: Customer birthdate
          example: '01/01/2020'
          format: date

    UserFieldsWithPoints:
      required:
        - email
        - firstname
        - lastname
        - birthdate
      type: object
      properties:
        photo:
          type: string
          description: Avatar of customer
          example: base64photo
        email:
          type: string
          description: Customer email
          example: mario.rossi@example.org 
          format: email
        firstname:
          type: string
          description: First name of customer
          example: Mario
        lastname:
          type: string
          description: Last name of customer
          example: Rossi
        birthdate:
          type: string
          description: Customer birthdate
          example: '01/01/2020'
          format: date
        points:
          type: integer
          description: Customer lottery points
          default: 0
    
    UpdateUser:
      required:
        - status
        - message
        - body
      type: object
      properties:
        status:
          type: string
          description: status code message
          example: success
        message: 
          type: string
          description: operation result
          example: Operation done
        body:
          $ref: '#/components/schemas/UserFieldsWithPoints'

    Badwords:
      required:
        - status
        - message
        - body
      type: object
      properties:
        status:
          type: string
          description: status code message
          example: success
        message: 
          type: string
          description: operation result
          example: Operation done
        body:
          $ref: '#/components/schemas/BadwordsField'
    
    Blacklist:
      required:
        - status
        - message
        - body
      type: object
      properties:
        status:
          type: string
          description: status code message
          example: success
        message: 
          type: string
          description: operation result
          example: Operation done
        body:
          $ref: '#/components/schemas/BlacklistField'

    BadwordsField:
      type: array
      items:
        type: string
      example:
        - hate
        - devil

    BlacklistField:
      type: array
      items:
        type: string
      example:
        - example@ex.com
        - devil@luci.com

    NotFound:
      type: object
      properties:
        status:
          type: string
          description: Result status
          default: failure
        message:
          type: string
          description: Result message
          default: User not found
